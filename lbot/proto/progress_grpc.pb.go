// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: progress.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProgressProcess_Run_FullMethodName = "/progress.ProgressProcess/Run"
)

// ProgressProcessClient is the client API for ProgressProcess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProgressProcessClient interface {
	Run(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (ProgressProcess_RunClient, error)
}

type progressProcessClient struct {
	cc grpc.ClientConnInterface
}

func NewProgressProcessClient(cc grpc.ClientConnInterface) ProgressProcessClient {
	return &progressProcessClient{cc}
}

func (c *progressProcessClient) Run(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (ProgressProcess_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProgressProcess_ServiceDesc.Streams[0], ProgressProcess_Run_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &progressProcessRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProgressProcess_RunClient interface {
	Recv() (*ProgressResponse, error)
	grpc.ClientStream
}

type progressProcessRunClient struct {
	grpc.ClientStream
}

func (x *progressProcessRunClient) Recv() (*ProgressResponse, error) {
	m := new(ProgressResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProgressProcessServer is the server API for ProgressProcess service.
// All implementations must embed UnimplementedProgressProcessServer
// for forward compatibility
type ProgressProcessServer interface {
	Run(*ProgressRequest, ProgressProcess_RunServer) error
	mustEmbedUnimplementedProgressProcessServer()
}

// UnimplementedProgressProcessServer must be embedded to have forward compatible implementations.
type UnimplementedProgressProcessServer struct {
}

func (UnimplementedProgressProcessServer) Run(*ProgressRequest, ProgressProcess_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedProgressProcessServer) mustEmbedUnimplementedProgressProcessServer() {}

// UnsafeProgressProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProgressProcessServer will
// result in compilation errors.
type UnsafeProgressProcessServer interface {
	mustEmbedUnimplementedProgressProcessServer()
}

func RegisterProgressProcessServer(s grpc.ServiceRegistrar, srv ProgressProcessServer) {
	s.RegisterService(&ProgressProcess_ServiceDesc, srv)
}

func _ProgressProcess_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProgressRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProgressProcessServer).Run(m, &progressProcessRunServer{stream})
}

type ProgressProcess_RunServer interface {
	Send(*ProgressResponse) error
	grpc.ServerStream
}

type progressProcessRunServer struct {
	grpc.ServerStream
}

func (x *progressProcessRunServer) Send(m *ProgressResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ProgressProcess_ServiceDesc is the grpc.ServiceDesc for ProgressProcess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProgressProcess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "progress.ProgressProcess",
	HandlerType: (*ProgressProcessServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _ProgressProcess_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "progress.proto",
}
