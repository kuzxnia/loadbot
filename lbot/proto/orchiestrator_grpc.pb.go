// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: lbot/proto/orchiestrator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrchistratorService_Install_FullMethodName   = "/proto.OrchistratorService/Install"
	OrchistratorService_UnInstall_FullMethodName = "/proto.OrchistratorService/UnInstall"
)

// OrchistratorServiceClient is the client API for OrchistratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchistratorServiceClient interface {
	Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error)
	UnInstall(ctx context.Context, in *UnInstallRequest, opts ...grpc.CallOption) (*UnInstallResponse, error)
}

type orchistratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchistratorServiceClient(cc grpc.ClientConnInterface) OrchistratorServiceClient {
	return &orchistratorServiceClient{cc}
}

func (c *orchistratorServiceClient) Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error) {
	out := new(InstallResponse)
	err := c.cc.Invoke(ctx, OrchistratorService_Install_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchistratorServiceClient) UnInstall(ctx context.Context, in *UnInstallRequest, opts ...grpc.CallOption) (*UnInstallResponse, error) {
	out := new(UnInstallResponse)
	err := c.cc.Invoke(ctx, OrchistratorService_UnInstall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchistratorServiceServer is the server API for OrchistratorService service.
// All implementations must embed UnimplementedOrchistratorServiceServer
// for forward compatibility
type OrchistratorServiceServer interface {
	Install(context.Context, *InstallRequest) (*InstallResponse, error)
	UnInstall(context.Context, *UnInstallRequest) (*UnInstallResponse, error)
	mustEmbedUnimplementedOrchistratorServiceServer()
}

// UnimplementedOrchistratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrchistratorServiceServer struct {
}

func (UnimplementedOrchistratorServiceServer) Install(context.Context, *InstallRequest) (*InstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedOrchistratorServiceServer) UnInstall(context.Context, *UnInstallRequest) (*UnInstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnInstall not implemented")
}
func (UnimplementedOrchistratorServiceServer) mustEmbedUnimplementedOrchistratorServiceServer() {}

// UnsafeOrchistratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchistratorServiceServer will
// result in compilation errors.
type UnsafeOrchistratorServiceServer interface {
	mustEmbedUnimplementedOrchistratorServiceServer()
}

func RegisterOrchistratorServiceServer(s grpc.ServiceRegistrar, srv OrchistratorServiceServer) {
	s.RegisterService(&OrchistratorService_ServiceDesc, srv)
}

func _OrchistratorService_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchistratorServiceServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchistratorService_Install_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchistratorServiceServer).Install(ctx, req.(*InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchistratorService_UnInstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnInstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchistratorServiceServer).UnInstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchistratorService_UnInstall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchistratorServiceServer).UnInstall(ctx, req.(*UnInstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchistratorService_ServiceDesc is the grpc.ServiceDesc for OrchistratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchistratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OrchistratorService",
	HandlerType: (*OrchistratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Install",
			Handler:    _OrchistratorService_Install_Handler,
		},
		{
			MethodName: "UnInstall",
			Handler:    _OrchistratorService_UnInstall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lbot/proto/orchiestrator.proto",
}
